// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    username, password, full_name, mobile, password_changed_at
) VALUES (
             ?, ?, ?, ?, ?
         )
`

type CreateUserParams struct {
	Username          string       `json:"username"`
	Password          string       `json:"password"`
	FullName          string       `json:"full_name"`
	Mobile            string       `json:"mobile"`
	PasswordChangedAt sql.NullTime `json:"password_changed_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.FullName,
		arg.Mobile,
		arg.PasswordChangedAt,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = ?
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, password, full_name, mobile, password_changed_at, created_at FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Mobile,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, password, full_name, mobile, password_changed_at, created_at FROM users
ORDER BY username DESC
LIMIT ?
OFFSET ?
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.Password,
			&i.FullName,
			&i.Mobile,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users
SET full_name=?, mobile=?
WHERE username = ?
`

type UpdateUserParams struct {
	FullName string `json:"full_name"`
	Mobile   string `json:"mobile"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser, arg.FullName, arg.Mobile, arg.Username)
}

const updateUserPassword = `-- name: UpdateUserPassword :execresult
UPDATE users
SET password=?, password_changed_at=?
WHERE username = ?
`

type UpdateUserPasswordParams struct {
	Password          string       `json:"password"`
	PasswordChangedAt sql.NullTime `json:"password_changed_at"`
	Username          string       `json:"username"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.PasswordChangedAt, arg.Username)
}
