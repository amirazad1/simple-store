// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: factor_detail.sql

package db

import (
	"context"
	"database/sql"
)

const createFactorDetail = `-- name: CreateFactorDetail :execresult
INSERT INTO factor_details (
    factor_id, product_id, sale_count, sale_price
) VALUES (
             ?, ?, ?, ?
         )
`

type CreateFactorDetailParams struct {
	FactorID  int64 `json:"factor_id"`
	ProductID int64 `json:"product_id"`
	SaleCount int32 `json:"sale_count"`
	SalePrice int64 `json:"sale_price"`
}

func (q *Queries) CreateFactorDetail(ctx context.Context, arg CreateFactorDetailParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFactorDetail,
		arg.FactorID,
		arg.ProductID,
		arg.SaleCount,
		arg.SalePrice,
	)
}

const deleteFactorDetail = `-- name: DeleteFactorDetail :exec
DELETE FROM factor_details
WHERE id = ?
`

func (q *Queries) DeleteFactorDetail(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFactorDetail, id)
	return err
}

const getFactorDetail = `-- name: GetFactorDetail :one
SELECT factor_id, product_id, sale_count, sale_price, id FROM factor_details
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFactorDetail(ctx context.Context, id int64) (FactorDetail, error) {
	row := q.db.QueryRowContext(ctx, getFactorDetail, id)
	var i FactorDetail
	err := row.Scan(
		&i.FactorID,
		&i.ProductID,
		&i.SaleCount,
		&i.SalePrice,
		&i.ID,
	)
	return i, err
}

const listFactorDetails = `-- name: ListFactorDetails :many
SELECT factor_id, product_id, sale_count, sale_price, id FROM factor_details
WHERE factor_id = ?
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListFactorDetailsParams struct {
	FactorID int64 `json:"factor_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListFactorDetails(ctx context.Context, arg ListFactorDetailsParams) ([]FactorDetail, error) {
	rows, err := q.db.QueryContext(ctx, listFactorDetails, arg.FactorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FactorDetail
	for rows.Next() {
		var i FactorDetail
		if err := rows.Scan(
			&i.FactorID,
			&i.ProductID,
			&i.SaleCount,
			&i.SalePrice,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFactorDetail = `-- name: UpdateFactorDetail :execresult
UPDATE factor_details
SET product_id=?, sale_count=?, sale_price=?
WHERE id = ?
`

type UpdateFactorDetailParams struct {
	ProductID int64 `json:"product_id"`
	SaleCount int32 `json:"sale_count"`
	SalePrice int64 `json:"sale_price"`
	ID        int64 `json:"id"`
}

func (q *Queries) UpdateFactorDetail(ctx context.Context, arg UpdateFactorDetailParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateFactorDetail,
		arg.ProductID,
		arg.SaleCount,
		arg.SalePrice,
		arg.ID,
	)
}
