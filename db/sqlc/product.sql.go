// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO products (
    name, brand, model, init_number, present_number, buy_price, buy_date, sale_price
) VALUES (
             ?, ?, ?, ?, ?, ?, ?, ?
         )
`

type CreateProductParams struct {
	Name          string         `json:"name"`
	Brand         sql.NullString `json:"brand"`
	Model         sql.NullString `json:"model"`
	InitNumber    int32          `json:"init_number"`
	PresentNumber int32          `json:"present_number"`
	BuyPrice      int64          `json:"buy_price"`
	BuyDate       time.Time      `json:"buy_date"`
	SalePrice     sql.NullInt64  `json:"sale_price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProduct,
		arg.Name,
		arg.Brand,
		arg.Model,
		arg.InitNumber,
		arg.PresentNumber,
		arg.BuyPrice,
		arg.BuyDate,
		arg.SalePrice,
	)
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT name, brand, model, init_number, present_number, buy_price, buy_date, sale_price, created_at, id FROM products
WHERE id = ? LIMIT 1
FOR UPDATE
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.Name,
		&i.Brand,
		&i.Model,
		&i.InitNumber,
		&i.PresentNumber,
		&i.BuyPrice,
		&i.BuyDate,
		&i.SalePrice,
		&i.CreatedAt,
		&i.ID,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT name, brand, model, init_number, present_number, buy_price, buy_date, sale_price, created_at, id FROM products
ORDER BY name
LIMIT ?
OFFSET ?
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.Name,
			&i.Brand,
			&i.Model,
			&i.InitNumber,
			&i.PresentNumber,
			&i.BuyPrice,
			&i.BuyDate,
			&i.SalePrice,
			&i.CreatedAt,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :execresult
UPDATE products
SET name=?,brand=?,model=?,init_number=?,present_number=?,buy_price=?,buy_date=?,sale_price=?
WHERE id = ?
`

type UpdateProductParams struct {
	Name          string         `json:"name"`
	Brand         sql.NullString `json:"brand"`
	Model         sql.NullString `json:"model"`
	InitNumber    int32          `json:"init_number"`
	PresentNumber int32          `json:"present_number"`
	BuyPrice      int64          `json:"buy_price"`
	BuyDate       time.Time      `json:"buy_date"`
	SalePrice     sql.NullInt64  `json:"sale_price"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.Brand,
		arg.Model,
		arg.InitNumber,
		arg.PresentNumber,
		arg.BuyPrice,
		arg.BuyDate,
		arg.SalePrice,
		arg.ID,
	)
}

const updateProductPresent = `-- name: UpdateProductPresent :execresult
UPDATE products
SET present_number=?
WHERE id = ?
`

type UpdateProductPresentParams struct {
	PresentNumber int32 `json:"present_number"`
	ID            int64 `json:"id"`
}

func (q *Queries) UpdateProductPresent(ctx context.Context, arg UpdateProductPresentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProductPresent, arg.PresentNumber, arg.ID)
}
