// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: factor.sql

package db

import (
	"context"
	"database/sql"
)

const createFactor = `-- name: CreateFactor :execresult
INSERT INTO factors (
    customer_name, customer_mobile, seller
) VALUES (
             ?, ?, ?
         )
`

type CreateFactorParams struct {
	CustomerName   sql.NullString `json:"customer_name"`
	CustomerMobile sql.NullString `json:"customer_mobile"`
	Seller         string         `json:"seller"`
}

func (q *Queries) CreateFactor(ctx context.Context, arg CreateFactorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFactor, arg.CustomerName, arg.CustomerMobile, arg.Seller)
}

const deleteFactor = `-- name: DeleteFactor :exec
DELETE FROM factors
WHERE id = ?
`

func (q *Queries) DeleteFactor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFactor, id)
	return err
}

const getFactor = `-- name: GetFactor :one
SELECT customer_name, customer_mobile, seller, created_at, id FROM factors
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFactor(ctx context.Context, id int64) (Factor, error) {
	row := q.db.QueryRowContext(ctx, getFactor, id)
	var i Factor
	err := row.Scan(
		&i.CustomerName,
		&i.CustomerMobile,
		&i.Seller,
		&i.CreatedAt,
		&i.ID,
	)
	return i, err
}

const listFactors = `-- name: ListFactors :many
SELECT customer_name, customer_mobile, seller, created_at, id FROM factors
ORDER BY id DESC
LIMIT ?
OFFSET ?
`

type ListFactorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFactors(ctx context.Context, arg ListFactorsParams) ([]Factor, error) {
	rows, err := q.db.QueryContext(ctx, listFactors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Factor{}
	for rows.Next() {
		var i Factor
		if err := rows.Scan(
			&i.CustomerName,
			&i.CustomerMobile,
			&i.Seller,
			&i.CreatedAt,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFactor = `-- name: UpdateFactor :execresult
UPDATE factors
SET customer_name=?, customer_mobile=?, seller=?
WHERE id = ?
`

type UpdateFactorParams struct {
	CustomerName   sql.NullString `json:"customer_name"`
	CustomerMobile sql.NullString `json:"customer_mobile"`
	Seller         string         `json:"seller"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdateFactor(ctx context.Context, arg UpdateFactorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateFactor,
		arg.CustomerName,
		arg.CustomerMobile,
		arg.Seller,
		arg.ID,
	)
}
